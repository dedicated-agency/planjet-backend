// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


model User {
  telegram_id String @id
  name String
  username String?
  phone String?
  language_code String @default("en")

  groupUsers GroupUser[]
  tasks Task[]
}

model Group {
  id String @id
  name String

  groupUsers GroupUser[]
  projects Project[]
}

model GroupUser{
  group_id String
  user_id String

  @@unique([group_id, user_id])

  user User @relation(fields: [user_id], references: [telegram_id])
  group Group @relation(fields: [group_id], references: [id])
}

model Project {
  id Int @default(autoincrement()) @id
  group_id String
  topic_id String
  name String

  group Group @relation(fields: [group_id], references: [id])
  tasks Task[]
  statuses Status[]
}

model Status {
  id Int @default(autoincrement()) @id
  project_id Int
  name String
  order Int

  project Project @relation(fields: [project_id], references: [id])
  tasks Task[]
}

model Task {
  id Int @default(autoincrement()) @id
  status_id Int
  project_id Int
  message_id Int?
  user_id String
  participants String
  name String
  description String? @db.Text
  deadline DateTime?
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  project Project @relation(fields: [project_id], references: [id])
  status Status  @relation(fields: [status_id], references: [id])
  user User @relation(fields: [user_id], references: [telegram_id])
}